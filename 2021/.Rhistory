colname(father.son)
colnames(father.son)
thing2 <- lm(sheight ~ fheight, data = father.son)
summary(thing2)
# C
mean_fheight = mean(father.son$fheight)
sd_fheight <- sqrt(var(father.son$fheight))
points_of_interest <- c(father.son$fheight + sd_fheight,
father.son$fheight + 2*sd_fheight,
father.son$fheight + 3*sd_fheight)
predict.lm(thing2, points_of_interest)
points_of_interest <- c(mean_fheight + sd_fheight,
mean_fheight + 2*sd_fheight,
mean_fheight + 3*sd_fheight)
predict.lm(thing2, points_of_interest)
?predict.lm
predict.lm(thing2, points_of_interest, interval = 'prediction')
points_of_interest <- data.frame(mean_fheight + sd_fheight,
mean_fheight + 2*sd_fheight,
mean_fheight + 3*sd_fheight)
predict.lm(thing2, points_of_interest, interval = 'prediction')
predict.lm(thing2, fheight = points_of_interest, interval = 'prediction')
predict.lm(thing2, fheight = points_of_interest, interval = 'confidence')
predict.lm(thing2, fheight = points_of_interest, interval = 'none')
predicted_poitns <- alpha_coeff + beta_coeff*points_of_interest
predicted_points
predicted_points <- alpha_coeff + beta_coeff*points_of_interest
predicted_points
predicted_points <- thing2$coefficients(1) + beta_coeff*points_of_interest
thing2$coefficients(1)
thing2$coefficients[2]
predicted_points <- thing2$coefficients[1] + thing2$coefficients[2]*points_of_interest
predicted_points
summary(thing2)
plot(thing2)
plot(father.son$fheight ~ father.son$fheight)
plot(y = father.son$fheight, x = father.son$fheight)
thing2$model
# F
TSS <- sum((father.son$sheight - mean(father.son$sheight))^2)
TSS
predict.lm(thin2)
predict.lm(thing2)
View(predict.lm(thing2))
sum((predict.lm(thing2)-mean(father.son$sheight)^2)
)
sum((predict.lm(thing2)-mean(father.son$sheight))^2
)
ESS/TSS
ESS <- sum((predict.lm(thing2)-mean(father.son$sheight))^2)
ESS/TSS
1-ESS/TSS
var_explained <- 1-ESS/TSS
var_explained
yhat <- predict.lm(thing1)
yhat <- predict.lm(thing1)
resid <- yhat - father.son$fheight
plot(resid)
summary(resid)
yhat
length(yhat) - lengtH(father.son$fheight)
length(yhat) - lengtH(father.son$fheight)
length(yhat) - length(father.son$fheight)
yhat <- thing2$coefficients[1] + thing2$coefficients[2]*father.son$sheight
resid <- yhat - father.son$fheight
plot(resid)
summary(resid)
thing3_df <- as.data.frame(resid, father.son)
thing3_df <- as.data.frame(resid = resid, father = father.son$fheight, son = father.son$sheight)
thing3_df <- cbing(resid = resid, father.son)_
thing3_df <- cbing(resid = resid, father.son)
thing3_df <- cbind(resid = resid, father.son)
View(thing3_df)
View(thing3_df)
thing3 <- lm(resid ~ fheight, data = thing3_df)
summary(thing)
summary(thing3)
couple_of_strings <- ('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
parse(couple_of_strings)
parse(couple_of_strings(1))
couple_of_strings(1)
couple_of_strings[1]
parse(couple_of_strings[1])
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
parse(couple_of_strings[1])
?parse
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
parse(text =couple_of_strings[1])
scan(couple_of_strings[1])
scan(text = couple_of_strings[1])
library(tidyverse)
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
str_sub(couple_of_strings[1], 5,6)
couple_of_strings <- c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings')
str_sub(couple_of_strings[1], 6,7)
cells <- purrr::map(couple_of_strings, fun = str_sub(start = 6, end = 7))
couple_of_strings <- data_frame(c('thing1', 'thing2', 'thing3'),
c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings'))
head(couple_of_strings)
str_sub(couple_of_strings[1], 6,7)
# YAY WE DID IT!
couple_of_strings <- data_frame(label = c('thing1', 'thing2', 'thing3'), value =
c('2004-D1-otherthings', '2004D1-otherthings1', '2004C5-otherthings'))
head(couple_of_strings)
str_sub(couple_of_strings[1], 6,7)
# YAY WE DID IT!
couple_of_strings <- data_frame(label = c('thing1', 'thing2', 'thing3'), value =
c('2004-D1-otherthings', '2004-D2-otherthing', '2004-D3-otherthing'))
head(couple_of_strings)
str_sub(couple_of_strings[1], 6,7)
# YAY WE DID IT!
couple_of_strings <- data_frame(label = c('thing1', 'thing2', 'thing3'), value =
c('2004-D1-otherthings', '2004-D2-otherthing', '2004-D3-otherthing'))
head(couple_of_strings)
str_sub(couple_of_strings[1,2], 6,7)
# YAY WE DID IT!
cells <- purrr::map(couple_of_strings[,2], fun = str_sub(start = 6, end = 7))
cells <- purrr::map(couple_of_strings[,2], str_sub(start = 6, end = 7))
cells <- purrr::map(.x = couple_of_strings[,2], .f = str_sub(.x,start = 6, end = 7))
str_sub(couple_of_strings[2], 6,7)
str_sub(couple_of_strings[,2], 6,7)
str_sub(couple_of_strings[,2], 6,7)
couple_of_strings[,2]
cells <- purrr::map(.x = couple_of_strings[,2], .f = .x + )
cells <- purrr::map(.x = couple_of_strings[,2], .f = .x +2 )
cells <- purrr::map(.x = couple_of_strings[,2], function(xx) xx +2 )
cells <- purrr::map(.x = couple_of_strings[,2], function(xx) xx +'2' )
cells <- purrr::map(couple_of_strings[,2], function (xx) str_sub(xx ,start = 6, end = 7))
cells
cells
library(tidyverse)
?write_csv
View(couple_of_strings)
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 4)
)
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6)
names = rep(c('a', 'b', 'c', 'd', 'e'), 5),
measurements = rnorm((30, 1, 2)))
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6)
names = rep(c('a', 'b', 'c', 'd', 'e'), 5),
measurements = rnorm((30, 1, 2)))
rep(c('a', 'b', 'c', 'd', 'e'), 5)
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6)
names = rep(c('a', 'b', 'c', 'd', 'e'), 5),
measurements = rnorm(30, 1, 2)))
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6)
names = rep(c('a', 'b', 'c', 'd', 'e'), 5),
measurements = rnorm(30, 1, 2))
rnorm(30,1,2)
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6)
names = rep(c('a', 'b', 'c', 'd', 'e'), 5), measurements = rnorm(30,1,2))
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6),
names = rep(c('a', 'b', 'c', 'd', 'e'), 5),
measurements = rnorm(30, 1, 2))
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6),
names = rep(c('a', 'b', 'c', 'd', 'e'), 6),
measurements = rnorm(30, 1, 2))
thing
thing %>% ggplot(aes(x = names, y = measurements, color = clusters)) + geom_line()
thing %>% ggplot(aes(x = names, y = measurements, color = cluster)) + geom_line()
thing %>% ggplot(aes(x = names, y = measurements, color = cluster)) + geom_bar()
thing %>% ggplot(aes(x = names, y = measurements, color = cluster)) + geom_bar(stat_count = "identity")
thing %>% ggplot(aes(x = names, y = measurements, color = cluster)) + geom_line()
thing %>% ggplot(aes(x = names, y = measurements, color = cluster)) + geom_bar(stat = 'identity')
thing %>% ggplot(aes(x = names, y = measurements)) + geom_bar(stat = 'identity', fill = cluster)
thing %>% ggplot(aes(x = names, y = measurements, fill = cluster)) + geom_bar(stat = 'identity')
thing %>% ggplot(aes(x = names, y = measurements, group = cluster)) + geom_line()
thing %>% ggplot(aes(x = names, y = measurements, group = cluster)) + geom_line() + geom_point()
thing <- data_frame(cluster = rep(c(1,2,3,4,5), 6),
names = rep(c(2,3,4,5,6), 6),
measurements = rnorm(30, 1, 2))
thing %>% ggplot(aes(x = names, y = measurements, group = cluster)) + geom_line() + geom_point()
library(readr)
km_agg_tidy <- read_csv("Downloads/km.agg.tidy.csv")
View(km_agg_tidy)
km_agg_tidy
na.omit(km_agg_tidy)
km_agg_tidy <-  na.omit(km_agg_tidy)
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line() + geom_point()
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster)) + geom_point()
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster)) + geom_point() + scale_color_brewer()
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster)) + geom_point() + scale_color_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster)) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = as.factor(cluster)) + geom_line(aes(color = cluster)) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = as.factor(cluster))) + geom_line(aes(color = cluster)) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster)) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = cluster, group = cluster)) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = as.factpr(cluster))) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = as.fact0r(cluster))) + geom_point() + scale_fill_brewer(palette="Dark2")
km_agg_tidy %>% ggplot(aes(x = domain, y = measurement, group = cluster)) + geom_line(aes(color = as.factor(cluster))) + geom_point() + scale_fill_brewer(palette="Dark2")
x0 <- 42
class(x0)
# can store multiple values in the same memory slot
v0 <- c(41, x0, 43)
v0
# acccessing specific parts of the vector
v0[2]
v0[1:3]
# can store multiple vectors
df0 <- data.frame(v0, 2*v0, v0/2)
df0
# add and substract
x0 + x0
x0-3
# mult + div
x0*4
x0/4
v0*4
# mult with dataframes
2*df0
# define a 3x3 matrix
mt0 <- as.matrix(df0)
mt0
t(mt0)
x0^2
# vector multiplication
v0 * v0 # element wise
v0 %*% v0 # dot product
v0 %*% t(v0) # vector product
mt0 %*% mt0 # matrix product
sum(1,2,3)
sum(v0)
my_sum <- function(vector){
# sum the first and last entry of a vector
x <- vector[1] + vector[length(vector)]
return(x)
}
my_sum(v0)
my_sum(c())
library(tidyverse)
library(knitr)
library(scales)
# need to set where we get our data from -CHANGE THIS FOR YOUR COMPUTER
setwd("~/Documents/GitHub/R-Workshop-for-STEM/2021")
# many ways to import data
covid_global <- read_csv("time_series_covid19_confirmed_global.csv")
covid_US <- read_csv("time_series_covid19_confirmed_US.csv")
head(covid_US)
infected_data_tidy <- covid_US %>%
gather(date_stamp, # this is the new column which will take values from covid_US columns
num_infect, # this is the new value
'1/22/20':'11/28/20' # the columns we're getting values from
) %>%
rename(Province = `Province_State`, Country = `Country_Region`, City = `Admin2`) %>%
select(Country, Province, date_stamp, num_infect) %>%
group_by(Province)
# change strings to dates
infected_data_tidy$date_stamp <- lubridate::mdy(infected_data_tidy$date_stamp)
# we want to aggregate data on a country scale for summary purposes
infected_summary <- infected_data_tidy %>%
group_by(date_stamp) %>%                           # each locale has a date stamp and we want to summarize by the day
summarise(total = sum(num_infect))                 # aggregating function
tail(infected_summary) # a variant of head
max(infected_data_tidy$num_infect) # we use the subset operation $ to select the one column we want then take the maximum
print('----------------------------------------------------------------------')
summary(infected_data_tidy$num_infect)
print('----------------------------------------------------------------------')
# get max from summary (note that the output is a list)
summary(infected_data_tidy$num_infect)[6]
print('----------------------------------------------------------------------')
# check that it is same as above
summary(infected_data_tidy$num_infect)[6] == max(infected_data_tidy$num_infect)
infected_summary %>% ggplot(aes(x = date_stamp, y = total)) +
geom_line(colour = 'red')+
scale_y_continuous(labels = comma) +
labs(title = "US Totals for Covid-19",
x = "Date",
y = "Totals") +
theme_grey()
infected_summary %>% ggplot(aes(x = date_stamp, y = c(0,diff(total)))) +
geom_line(colour = 'maroon') +
geom_smooth(method = 'loess', se = TRUE) +
scale_y_continuous(labels = comma) +
labs(title = "US Daily Cases for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
# option 1: Histogram
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_histogram(bins = 50, fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma)+
theme_minimal()
# option 2: dot plot - doesn't work well IN THIS CASE but shown for completeness
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_dotplot(method = 'histodot', binwidth = 5000, fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma)+
theme_minimal()
# option 3:
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_density(kernel = 'gaussian', fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = comma) +
theme_minimal()
infected_data_tidy %>%
group_by(Province) %>%
summarise(total_infect = sum(num_infect)) %>%
arrange(desc(total_infect)) %>%
top_n(10) %>%
ggplot(aes(x = reorder(Province,-total_infect), y = total_infect)) +
geom_bar(stat = 'identity', fill = 'royalblue') +
labs(title = 'Total Covid Cases on Nov 28, 2020',
subtitle = 'Top 10 most affected States',
x = 'State',
y = 'Confirmed Cases') +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45))
infected_data_tidy %>%
group_by(Province) %>%
summarise(total_infect = sum(num_infect)) %>%
arrange(desc(total_infect)) %>%
top_n(-10) %>%
ggplot(aes(x = reorder(Province, -total_infect), y = total_infect)) +
geom_bar(stat = 'identity', aes(fill = total_infect)) +
labs(title ='Total Covid Cases on Nov 28, 2020',
subtitle = 'Top 10 least affected States',
x = 'State',
y = 'Confirmed Cases') +
scale_y_continuous(labels = comma) +
scale_fill_gradient(low = "blue", high = "purple") +
theme(axis.text.x = element_text(angle = 45))
# option 1: side by side
infected_data_tidy %>% ggplot(aes(x = date_stamp, num_infect)) +
geom_line(colour = 'maroon') +
facet_grid(~Province) +
scale_y_continuous(labels = comma) +
labs(title = "US Total case per State for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
# option 2: wraping
infected_data_tidy %>% ggplot(aes(date_stamp, num_infect)) +
geom_line(colour = 'maroon') +
facet_wrap(~Province) +
scale_y_continuous(labels = comma) +
labs(title = "US Total case per State for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
x0 <- 42
class(x0)
# can store multiple values in the same memory slot
v0 <- c(41, x0, 43)
v0
# acccessing specific parts of the vector
v0[2]
v0[1:3]
# can store multiple vectors
df0 <- data.frame(v0, 2*v0, v0/2)
df0
# add and substract
x0 + x0
x0-3
# mult + div
x0*4
x0/4
v0*4
# mult with dataframes
2*df0
# define a 3x3 matrix
mt0 <- as.matrix(df0)
mt0
t(mt0)
x0^2
# vector multiplication
v0 * v0 # element wise
v0 %*% v0 # dot product
v0 %*% t(v0) # vector product
mt0 %*% mt0 # matrix product
sum(1,2,3)
sum(v0)
my_sum <- function(vector){
# sum the first and last entry of a vector
x <- vector[1] + vector[length(vector)]
return(x)
}
my_sum(v0)
my_sum(c())
library(tidyverse)
library(knitr)
library(scales)
# need to set where we get our data from -CHANGE THIS FOR YOUR COMPUTER
setwd("~/Documents/GitHub/R-Workshop-for-STEM/2021")
# many ways to import data
covid_global <- read_csv("time_series_covid19_confirmed_global.csv")
covid_US <- read_csv("time_series_covid19_confirmed_US.csv")
head(covid_US)
infected_data_tidy <- covid_US %>%
gather(date_stamp, # this is the new column which will take values from covid_US columns
num_infect, # this is the new value
'1/22/20':'11/28/20' # the columns we're getting values from
) %>%
rename(Province = `Province_State`, Country = `Country_Region`, City = `Admin2`) %>%
select(Country, Province, date_stamp, num_infect) %>%
group_by(Province)
# change strings to dates
infected_data_tidy$date_stamp <- lubridate::mdy(infected_data_tidy$date_stamp)
# we want to aggregate data on a country scale for summary purposes
infected_summary <- infected_data_tidy %>%
group_by(date_stamp) %>%                           # each locale has a date stamp and we want to summarize by the day
summarise(total = sum(num_infect))                 # aggregating function
tail(infected_summary) # a variant of head
max(infected_data_tidy$num_infect) # we use the subset operation $ to select the one column we want then take the maximum
print('----------------------------------------------------------------------')
summary(infected_data_tidy$num_infect)
print('----------------------------------------------------------------------')
# get max from summary (note that the output is a list)
summary(infected_data_tidy$num_infect)[6]
print('----------------------------------------------------------------------')
# check that it is same as above
summary(infected_data_tidy$num_infect)[6] == max(infected_data_tidy$num_infect)
infected_summary %>% ggplot(aes(x = date_stamp, y = total)) +
geom_line(colour = 'red')+
scale_y_continuous(labels = comma) +
labs(title = "US Totals for Covid-19",
x = "Date",
y = "Totals") +
theme_grey()
infected_summary %>% ggplot(aes(x = date_stamp, y = c(0,diff(total)))) +
geom_line(colour = 'maroon') +
geom_smooth(method = 'loess', se = TRUE) +
scale_y_continuous(labels = comma) +
labs(title = "US Daily Cases for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
# option 1: Histogram
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_histogram(bins = 50, fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma)+
theme_minimal()
# option 2: dot plot - doesn't work well IN THIS CASE but shown for completeness
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_dotplot(method = 'histodot', binwidth = 5000, fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma)+
theme_minimal()
# option 3:
infected_summary %>% ggplot(aes(c(0,diff(total)))) +
geom_density(kernel = 'gaussian', fill = 'steelblue', colour = 'navy')+
labs(title = 'Daily Infection Totals',
subtitle = 'Within the USA',
x = 'Number of Cases',
y = 'Number of Days') +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = comma) +
theme_minimal()
infected_data_tidy %>%
group_by(Province) %>%
summarise(total_infect = sum(num_infect)) %>%
arrange(desc(total_infect)) %>%
top_n(10) %>%
ggplot(aes(x = reorder(Province,-total_infect), y = total_infect)) +
geom_bar(stat = 'identity', fill = 'royalblue') +
labs(title = 'Total Covid Cases on Nov 28, 2020',
subtitle = 'Top 10 most affected States',
x = 'State',
y = 'Confirmed Cases') +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45))
infected_data_tidy %>%
group_by(Province) %>%
summarise(total_infect = sum(num_infect)) %>%
arrange(desc(total_infect)) %>%
top_n(-10) %>%
ggplot(aes(x = reorder(Province, -total_infect), y = total_infect)) +
geom_bar(stat = 'identity', aes(fill = total_infect)) +
labs(title ='Total Covid Cases on Nov 28, 2020',
subtitle = 'Top 10 least affected States',
x = 'State',
y = 'Confirmed Cases') +
scale_y_continuous(labels = comma) +
scale_fill_gradient(low = "blue", high = "purple") +
theme(axis.text.x = element_text(angle = 45))
# option 1: side by side
infected_data_tidy %>% ggplot(aes(x = date_stamp, num_infect)) +
geom_line(colour = 'maroon') +
facet_grid(~Province) +
scale_y_continuous(labels = comma) +
labs(title = "US Total case per State for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
# option 2: wraping
infected_data_tidy %>% ggplot(aes(date_stamp, num_infect)) +
geom_line(colour = 'maroon') +
facet_wrap(~Province) +
scale_y_continuous(labels = comma) +
labs(title = "US Total case per State for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
