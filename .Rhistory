y = "Totals") +
theme_light()
pt_spain_total
# Canadian daily increases (first order differencing)
pt_spain_diff1 <- spain_data_summary %>% ggplot(aes(x = date_stamp,
y = c(0, diff(infected)),
group = 1,colour ="Infected")) +
geom_line(alpha = 0.5) +
geom_smooth(method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
geom_line(aes(x = date_stamp,
y = c(0, diff(dead)),
colour = "Dead"), alpha = 0.5) +
geom_smooth(aes(x = date_stamp,
y = c(0, diff(dead)),
colour = "Dead"),
method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
geom_line(aes(x = date_stamp,
y = c(0 , diff(recovered)),
colour = "Recovered"),alpha = 0.5) +
geom_smooth(aes(x = date_stamp,
y = c(0 , diff(recovered)),
colour = "Recovered"),
method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
#     geom_line(aes(x = date_stamp,
#                   y = c(0, diff(total_infect - total_dead - total_recovered)),
#                         color = "Live Cases"),alpha = 0.5) +
scale_colour_manual("Legend",
#breaks = c("Infected", "Dead", "Recovered", "Live Cases"),
values = c("Infected" = "red",
"Dead" = "black",
"Recovered" = "green",
"Live Cases" = "gold")) +
scale_y_continuous(labels = comma) +
labs(title = "Spanish Daily Changes for Covid-19",
x = "Date",
y = "Daily Change (Number of Case)") +
theme_light()
pt_spain_diff1
infected_usa<- infected_data_tidy %>%
dplyr::filter(Country == "US")
dead_usa <- death_data_tidy %>%
dplyr::filter(Country == "US")
recovered_usa <- recovered_data_tidy %>%
dplyr::filter(Country == "US")
usa_data <- infected_usa %>%
left_join(dead_usa,
by = c("Country" = "Country",
"Province" = "Province",
"date_stamp" = "date_stamp")) %>%
left_join(recovered_usa,
by = c("Country" = "Country",
"Province" = "Province",
"date_stamp" = "date_stamp")) %>%
replace_na(list(num_infect = 0, num_dead = 0, num_recover = 0)) %>%
rename(infected = num_infect,
dead = num_dead,
recovered = num_recover) %>%
group_by(date_stamp)
usa_data_summary <- usa_data %>%
summarize(infected = sum(infected),
dead = sum(dead),
recovered = sum(recovered))
pt_usa_total <- usa_data_summary %>%
ggplot(aes(x = date_stamp, y = infected, group = 1,colour ="Infected")) +
geom_line() +
geom_line(aes(x = date_stamp, y = dead, colour = "Dead")) +
geom_line(aes(x = date_stamp, y = recovered, colour = "Recovered")) +
geom_line(aes(x = date_stamp,
y = (infected - dead - recovered),
color = "Live Cases")) +
scale_colour_manual("Legend",
#breaks = c("Infected", "Dead", "Recovered", "Live Cases"),
values = c("Infected" = "red",
"Dead" = "black",
"Recovered" = "green",
"Live Cases" = "gold")) +
scale_y_continuous(labels = comma) +
labs(title = "USA Totals for Covid-19",
x = "Date",
y = "Totals") +
theme_light()
pt_usa_total
# Canadian daily increases (first order differencing)
pt_usa_diff1 <- usa_data_summary %>% ggplot(aes(x = date_stamp,
y = c(0, diff(infected)),
group = 1,colour ="Infected")) +
geom_line(alpha = 0.5) +
geom_smooth(method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
geom_line(aes(x = date_stamp,
y = c(0, diff(dead)),
colour = "Dead"), alpha = 0.5) +
geom_smooth(aes(x = date_stamp,
y = c(0, diff(dead)),
colour = "Dead"),
method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
geom_line(aes(x = date_stamp,
y = c(0 , diff(recovered)),
colour = "Recovered"),alpha = 0.5) +
geom_smooth(aes(x = date_stamp,
y = c(0 , diff(recovered)),
colour = "Recovered"),
method = "loess",
se = FALSE,
linetype = "dashed",
size = 0.7) +
#     geom_line(aes(x = date_stamp,
#                   y = c(0, diff(total_infect - total_dead - total_recovered)),
#                         color = "Live Cases"),alpha = 0.5) +
scale_colour_manual("Legend",
#breaks = c("Infected", "Dead", "Recovered", "Live Cases"),
values = c("Infected" = "red",
"Dead" = "black",
"Recovered" = "green",
"Live Cases" = "gold")) +
scale_y_continuous(labels = comma) +
labs(title = "USA Daily Changes for Covid-19",
x = "Date",
y = "Daily Change (Number of Case)") +
theme_light()
pt_usa_diff1
global_ts <- ts(global_totals$total_infect)
# inital diagnostics
acf(global_ts) # suggests an MA(10)
pacf(global_ts) # suggests an AR(0)
adf.test(global_ts)
# this model doesn't make sense since the series isn't stationary
ARMA_0_10 <- arima(global_ts, order = c(0,0,10))
# log transform the data
adf.test(log(global_ts))
acf(log(global_ts))
pacf(log(global_ts)) # lol these did nothing
auto.arima(log(global_ts))
auto.arima(diff(global_ts, 2))
ARMA_2_0 <- arima(log(global_ts), order = c(2,2,0))
ARMA_2_0
ARMA_2_0_forecast <- predict(ARMA_2_0, 5)
ARMA_2_0_forecast # note that this is on the log scale
round(exp(ARMA_2_0_forecast$pred),0)
# italy_data_summary$infected
# Asym = number we steady out at (peak infected cases)
# xmid = inflection pont
# scal = growth rate
survivalmod_italy <- nls(italy_data_summary$infected ~
SSlogis(c(1:length(italy_data_summary$infected)),
Asym,
xmid,
scal),
data= italy_data_summary,
start=list(Asym=200000, xmid = 50, scal= 4))
# display results
survivalmod_italy
summary(survivalmod_italy)
TS_italy <- tibble(date_stamp = italy_data_summary$date_stamp,
infected_ts = italy_data_summary$infected -
SSlogis(c(1:length(italy_data_summary$date_stamp)),
summary(survivalmod_italy)$coefficients[1,1],
summary(survivalmod_italy)$coefficients[2,1],
summary(survivalmod_italy)$coefficients[3,1])
)
pt_TS_italy <- TS_italy %>% ggplot(aes(x = date_stamp, y = infected_ts)) +
geom_line(colour = "red") +
labs(title = "Time Series Component of Italy Additive Model",
x = "Date",
y = "Totals") +
theme_light()
pt_TS_italy
# ACF and PACF plots
acf(TS_italy$infected_ts)
pacf(TS_italy$infected_ts)
TSmodel_italy <- auto.arima(TS_italy$infected_ts)
summary(TSmodel_italy)
# now forecast
forecast_length <- 14
fore_italy <- forecast::forecast(TSmodel_italy, forecast_length)
fore_italy
# build vectors of all values (given and forecated)
forecasted_days <- c(italy_data_summary$date_stamp,
max(italy_data_summary$date_stamp) + days(c(1:14)))
forecasted_values <- c(italy_data_summary$infected,
SSlogis(c(length(italy_data_summary$date_stamp) :
length(italy_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_italy)$coefficients[1,1],
summary(survivalmod_italy)$coefficients[2,1],
summary(survivalmod_italy)$coefficients[3,1]) +
cumsum(pmax(0,fore_italy$mean)))
# build data frame for ggplot
predictions_italy <- tibble(date_stamp = forecasted_days,
infected_cast = forecasted_values,
fitted_values = c(SSlogis(c(1:length(italy_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_italy)$coefficients[1,1],
summary(survivalmod_italy)$coefficients[2,1],
summary(survivalmod_italy)$coefficients[3,1]),
max(SSlogis(c(1:length(italy_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_italy)$coefficients[1,1],
summary(survivalmod_italy)$coefficients[2,1],
summary(survivalmod_italy)$coefficients[3,1]))+
cumsum(pmax(0,fore_italy$mean)))
)
pt_TS_italy_forecast <- predictions_italy %>% ggplot(aes(x = date_stamp,
y = infected_cast,
colour = "Actual")) +
geom_line() +
geom_line(aes(x = date_stamp, y = fitted_values, colour = "Fitted")) +
geom_vline(colour = 'forestgreen', xintercept = max(italy_data_summary$date_stamp)) +
scale_colour_manual("Legend",
#breaks = c("Infected", "Dead", "Recovered", "Live Cases"),
values = c("Actual" = "red",
"Fitted" = "blue")) +
labs(title = "Italy Additive Model with 2 Week Forecast",
x = "Date",
y = "Totals",
caption = "Note: the green line is the latest date for Covid-19 confirmed infected case.
All values beyond the green line are forecasted values") +
theme_light()
pt_TS_italy_forecast
# time series: canada_data_sumamry$infected
survivalmod_canada <- nls(canada_data_summary$infected ~
SSlogis(c(1:length(canada_data_summary$infected)),
Asym,
xmid,
scal),
data= canada_data_summary,
start=list(Asym=max(canada_data_summary$infected),
xmid = 60, # 2 months?
scal= 1), # growing at least
control = list(warnOnly = TRUE,
maxiter = 10000)
)
survivalmod_canada
summary(survivalmod_canada)
TS_canada <- tibble(date_stamp = canada_data_summary$date_stamp,
infected_ts = canada_data_summary$infected -
SSlogis(c(1:length(canada_data_summary$date_stamp)),
summary(survivalmod_canada)$coefficients[1,1],
summary(survivalmod_canada)$coefficients[2,1],
summary(survivalmod_canada)$coefficients[3,1]))
pt_TS_canada <- TS_canada %>% ggplot(aes(x = date_stamp, y = infected_ts)) +
geom_line(colour = "red") +
labs(title = "Time Series Component of canada Additive Model",
x = "Date",
y = "Totals") +
theme_light()
pt_TS_canada
# ACF and PACF plots
acf(TS_canada$infected_ts)
pacf(TS_canada$infected_ts)
TSmodel_canada <- auto.arima(TS_canada$infected_ts)
TSmodel_canada <- forecast::Arima(diff(TS_canada$infected_ts), order = c(2,0,2))
summary(TSmodel_canada)
# now forecast
forecast_length <- 14
fore_canada <- forecast::forecast(TSmodel_canada, forecast_length)
fore_canada
# build vectors of all values (given and forecated)
forecasted_days <- c(canada_data_summary$date_stamp,
max(canada_data_summary$date_stamp) + days(c(1:14)))
forecasted_values <- c(canada_data_summary$infected,
SSlogis(c(length(canada_data_summary$date_stamp) :
length(canada_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_canada)$coefficients[1,1],
summary(survivalmod_canada)$coefficients[2,1],
summary(survivalmod_canada)$coefficients[3,1]) +
cumsum(pmax(fore_canada$mean,0)))
# build data frame for ggplot
predictions_canada <- tibble(date_stamp = forecasted_days,
infected_cast = forecasted_values,
fitted_values = c(SSlogis(c(1:length(canada_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_canada)$coefficients[1,1],
summary(survivalmod_canada)$coefficients[2,1],
summary(survivalmod_canada)$coefficients[3,1]),
max(SSlogis(c(1:length(canada_data_summary$date_stamp) +
forecast_length),
summary(survivalmod_canada)$coefficients[1,1],
summary(survivalmod_canada)$coefficients[2,1],
summary(survivalmod_canada)$coefficients[3,1])) +
cumsum(pmax(fore_canada$mean,0))
)
)
pt_TS_canada_forecast <- predictions_canada %>% ggplot(aes(x = date_stamp,
y = infected_cast,
colour = 'Actual')) +
geom_line() +
geom_vline(xintercept = max(canada_data_summary$date_stamp), colour = "forestgreen") +
geom_line(aes(x = date_stamp, y = fitted_values, colour = "Fitted")) +
scale_colour_manual("Legend",
#breaks = c("Infected", "Dead", "Recovered", "Live Cases"),
values = c("Actual" = "red",
"Fitted" = "blue")) +
labs(title = "Canada Additive Model with 2 Week Forecast",
x = "Date",
y = "Totals",
caption = "Note: the green line is the latest date for Covid-19 confirmed infected case.
All values beyond the green line are forecasted values") +
theme_light()
pt_TS_canada_forecast
# time series: china_data_summary$infected
survivalmod_china <- nls(china_data_summary$infected ~
SSlogis(c(1:length(china_data_summary$infected)),
Asym,
xmid,
scal),
data= china_data_summary,
start=list(Asym=max(china_data_summary$infected),
xmid = 60, # no good way to rationalize this choice
scal= 1),
control = list(warnOnly = TRUE,
maxiter = 100000)
)
# storing a number
x0 <- 42
class(x0)
# can store multiple values in the same memory slot
v0 <- c(41, x0, 43)
v0
# access specific values of a vector
v0[2]
v0[2:3]
# can store multiple vectors in a data frame
df0 <- data.frame(v0, 2*v0, v0/2)
df0
# addition and subtraction
x0 + x0
x0 - 42
# multiplication and subtraction
2*x0
x0*3
2*v0
2*df0 # note at how the scalar is applied
# define a 3x3 matrix
mt0 <- as.matrix(df0)
mt0
# transpose
t(mt0)
# vector multiplication
# element wise
v0 * v0
# dot product
v0 %*% v0
# vector product
v0 %*% t(v0)
# matrix product
mt0 %*% mt0
# built in function example
sum(1,2,3)
sum(v0)
my_sum <- function(vector){
# this function will sum the first and last numbers in a vector
x <- vector[1] + vector[length(vector)]
return(x)
}
my_sum(v0) # can you think of a case where this function will fail?
library(tidyverse)
library(knitr)
trees <- datasets::trees
# preview our data
head(trees)
# another option
glimpse(trees)
trees <- tbl_df(trees) # coerce dataframe into a tbl
# find the min and max for the girth
dplyr::summarise(trees, minimum = min(Girth))
dplyr::summarise_each(trees, funs(min))
# find the range of the data set
mins <- dplyr::summarise_each(trees, funs(min))
maxs <- dplyr::summarise_each(trees, funs(max))
rng <- maxs-mins
rng
# many other function available
dplyr::summarise_each(trees, funs(IQR))
# take note of the piping operator
# pipes pass the output of the commands preceding it into the first
# argument of the next command
trees %>% dplyr::mutate(Girth_cm = Girth*2.23)
trees %>%
dplyr::mutate(Girth_cm = round(Girth*2.23,2)) %>%
dplyr::select(Height, Volume, Girth_cm)
trees %>%
dplyr::mutate(Girth_cm = round(Girth*2.23,2)) %>%
dplyr::select(Height, Volume, Girth_cm) %>%
dplyr::filter(Girth_cm > 33)
selected_trees <- trees %>%
dplyr::mutate(Girth_cm = round(Girth*2.23,2)) %>%
dplyr::select(Height, Volume, Girth_cm) %>%
dplyr::filter(Girth_cm > 33)
selected_trees # same as above
solution <- trees %>%
dplyr::mutate(Girth_cm = round(Girth*2.23,2)) %>%
dplyr::select(Height, Volume, Girth_cm) %>%
dplyr::filter(Girth_cm > 20) %>%
dplyr::filter(Girth_cm < 36) %>%
dplyr::arrange(Height)
solution
plot1 <- solution %>% ggplot(aes(x = Height))
plot1
# add my favourite theme
plot1 <- plot1 + theme_minimal()
plot1 # much better :D
plot1 <- plot1 + geom_histogram(binwidth = 3, fill = "gold", colour = "navy", alpha = 0.7)
plot1
plot1 <- plot1 + labs(title = "Histogram of Selected Tree Heights",
xlab = "Height (inches)")
plot1
plot2 <- solution %>%
ggplot(aes(x = Height, y = Volume)) +
geom_point(colour = "navy", alpha = 0.7) +
labs(title = "Volume of CO2 vs. Height of Trees",
x = "Height (inches)",
y = "Volume of CO2 (m^3)") +
geom_smooth(method='lm', colour = "gold")+
theme_minimal()
plot2 <- solution %>%
ggplot(aes(x = Height, y = Volume)) +
geom_jitter(colour = "navy", alpha = 0.7) +
labs(title = "Volume of CO2 vs. Height of Trees",
x = "Height (inches)",
y = "Volume of CO2 (m^3)") +
geom_smooth(method='lm', colour = "gold")+
theme_minimal()
plot2
plot1 <- solution %>% ggplot(aes(x = Height)) +
geom_histogram(binwidth = 3, fill = "gold", colour = "navy", alpha = 0.7) +
labs(title = "Histogram of Selected Tree Heights",
xlab = "Height (inches)") +
theme_minimal()
plot1
plot1 <- solution %>% ggplot(aes(x = Height)) +
geom_histogram(binwidth = 3, fill = "gold", colour = "navy", alpha = 0.7) +
labs(title = "Histogram of Selected Tree Heights",
xlab = "Height (inches)") +
theme_minimal()
plot1
library(tidyverse)
# load the data
data(diamonds)
# preview the data
glimpse(diamonds)
# head(diamonds) is another option but glimpse works better here due to the number of columns
colnames(diamonds) # sometimes it's helpful to see just the column names (more)
# Base R command to get column wise summary statistics of the data
summary(diamonds)
# code is very similar to last week
# use the piping operator which passes the preceding argument as the first argument of the following function
plot1 <- diamonds %>% ggplot(aes(price)) +
geom_histogram(binwidth=500, fill = "navy", color = "gold") +
ggtitle("Diamond Price Distribution") + xlab("Diamond Price U$") + ylab("Frequency") +
theme_minimal()
# have to call the object in order to see it
plot1
plot2 <- diamonds %>% ggplot(aes(cut)) +
geom_bar(fill = "navy", color = "gold") +
ggtitle("Diamond Cut Distribution") + xlab("Cut of Diamond") + ylab("Frequency") +
theme_minimal()
plot2
plot3 <- diamonds %>% ggplot(aes(x = carat, y = price)) +
geom_point(color = "navy", alpha = 0.7) +
geom_smooth(method = "lm", color = "gold") +
ggtitle("Diamond Price vs. Carat") + xlab("Carats") + ylab("Price (USD)") +
theme_minimal()
plot3
diamonds %>%
filter(price < 500)
?lm # see documentation of the function
# pick your covariates - the variables that go into the regression
colnames(diamonds)
# start with a simple 2 variable model
lm1 <- lm(price ~ carat, data = diamonds)
lm1
plot1_lm <- diamonds %>% ggplot(aes(x = carat, y = price)) +
geom_point(colour = "navy", alpha = 0.5) +
geom_smooth( method = "lm", colour = "gold")+
ggtitle("Diamond Price vs. Carat") + xlab("Carat") + ylab("Price (USD)") +
theme_minimal()
plot1_lm
?lm # see documentation of the function
# pick your covariates - the variables that go into the regression
colnames(diamonds)
# start with a simple 2 variable model
lm1 <- lm(price ~ carat, data = diamonds)
summary(lm1)
?lm # see documentation of the function
# pick your covariates - the variables that go into the regression
colnames(diamonds)
# start with a simple 2 variable model
lm1 <- lm(log(price) ~ carat, data = diamonds)
summary(lm1)
plot1_lm <- diamonds %>% ggplot(aes(x = carat, y = log(price))) +
geom_point(colour = "navy", alpha = 0.5) +
geom_smooth( method = "lm", colour = "gold")+
ggtitle("Diamond Price vs. Carat") + xlab("Carat") + ylab("Price (USD)") +
theme_minimal()
plot1_lm
plot(lm1)
